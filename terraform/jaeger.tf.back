resource "aws_instance" "jaeger-server" {
  ami                         = local.ami_id
  instance_type               = "t2.micro"
  key_name                    = local.key_pair
  security_groups             = [aws_security_group.ssh.id, aws_security_group.jaeger-server.id]
  subnet_id                   = aws_subnet.this.id
  associate_public_ip_address = true
  iam_instance_profile        = aws_iam_instance_profile.instance_profile-infra.name

  tags = {
    Name = "jaeger-server"
  }

  user_data = <<-EOF
     #!/bin/bash
    sudo echo "ECS_DISABLE_METRICS=true
    ECS_UPDATES_ENABLED=true
    ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=15m
    ECS_IMAGE_CLEANUP_INTERVAL=10m
    ECS_CONTAINER_STOP_TIMEOUT=60s
    ECS_RESERVED_MEMORY=128
    ECS_ENABLE_TASK_IAM_ROLE=true
    ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true
    ECS_NUM_IMAGES_DELETE_PER_CYCLE=50
    ECS_CLUSTER=${local.ecs_cluster_name}
    " >> /etc/ecs/ecs.config
    EOF
}

resource "aws_security_group" "jaeger-server" {
  name        = "jaeger-server"
  description = "Allow all necessary ports for jaeger-server"
  vpc_id      = aws_vpc.this.id

  ingress {
    from_port   = 0
    to_port     = 16686
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_ecs_task_definition" "jaeger-server" {
  family                   = "jaeger-server"
  network_mode             = "bridge"
  requires_compatibilities = ["EC2"]
  execution_role_arn       = aws_iam_role.ecs_task_role.arn
  task_role_arn            = aws_iam_role.ecs_task_role.arn

  placement_constraints {
    type       = "memberOf"
    expression = "attribute:ecs.instance-id == ${aws_instance.jaeger-server.id}"
  }

  container_definitions = jsonencode([
    {
      name = "jaeger-server"
      image = "jaegertracing/jaeger-collector:latest"
      cpu = 512
      memory = 512
      essential = true
      portMappings = [
        {
          containerPort = 9042
          hostPort = 9042
          protocol = "tcp"
        }
      ],
      environment = [
        {
          name = "SCYLLA_SEEDS"
          value = "127.0.0.1"
        }
      ]
    },
  ])
}

resource "aws_ecs_service" "jaeger-server" {
  name            = "jaeger-server"
  cluster         = aws_ecs_cluster.this.id
  task_definition = aws_ecs_task_definition.jaeger-server.arn
  desired_count   = 1
  launch_type     = "EC2"
}